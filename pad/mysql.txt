mysql-00
查看Linux信息
	[root@localhost ~]# cat /etc/redhat-release
	CentOS Linux release 7.4.1708 (Core) 
查看mysql信息
	1、[root@ServerA mysql]# mysql -V
	mysql  Ver 14.14 Distrib 5.7.22, for linux-glibc2.12 (x86_64) using  EditLine wrapper
	2、select version();
	+---------------+
	| version()     |
	+---------------+
	| 5.7.3-m13-log |
	+---------------+
	1 row in set


mysql安装

安装环境centos7
安装mysql 5.7.23 x64
mysql官网下载mysql-5.7.23-1.el7.x86_64.rpm-bundle.tar，解压并按如下顺序执行

rpm -ivh mysql-community-common-5.7.23-1.el7.x86_64.rpm

rpm -ivh mysql-community-libs-5.7.23-1.el7.x86_64.rpm-bundle

rpm -ivh mysql-community-devel-5.7.23-1.el7.x86_64.rpm

rpm -ivh mysql-community-libs-compat-5.7.23-1.el7.x86_64.rpm

rpm -ivh mysql-community-client-5.7.23-1.el7.x86_64.rpm

rpm -ivh mysql-community-server-5.7.23-1.el7.x86_64.rpm

如果有冲突（发生在第二步），可能是服务器中存在mariadb，
rpm -qa|grep mariadb
存在则删除
rpm -e --nodeps mariadb-libs

到此基本安装完毕，修改配置文件
vim /etc/my.cnf

skip-grant-tables     #添加这句话，这时候登入mysql就不需要密码
如果免密不起作用，可能是修改了socket配置，这个先不要手动配置。

启动mysql服务
systemctrl start mysqld.service
免密码登陆
mysql -u root -p 

set password for root@localhost = password('123456');
一般会报错，然后再来一遍
mysql> flush privileges;  #更新权限
set password for root@localhost = password('123456');
成功后退出，将配置文件中免密登陆的地方删除掉。


修改存储文件路径
在/etc/my.cnf文件中修改了datadir和socket路径
目前就是修改了这两个路径

docker 安装mysql

从官网拉取镜像
docker pull mysql:5.7

创建容器脚本如下：
#! /bin/bash

MYSQL_HOME="/work/tool/mysql"

docker run --name mysql57 -p 7706:3306 -e MYSQL_ROOT_PASSWORD=123456 -v $MYSQL_HOME/data:/var/lib/mysql -v $MYSQL_HOME/conf:/etc/mysql/conf.d -d mysql:5.7

目前缺少配置文件，明天去现场，把现场的配置文件拿过来。
缺少的配置文件已经放到了$MYSQL_HOME/conf/下，并且有效。

20180917
解决现场的bug，一个SQL在公司可以执行，放到现场执行不了，报错信息大概如下（网上找的，自己的没保存）：ERROR 1055 (42000): Expression #3 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘imooc.s.type_name’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
网上查找资料，表示mysql 5.7在某个版本之后默认在sql_mode中增加了only_full_group选项，表示group by的语句在查询结果必须包含在group by中（这里需要对sql_mode了解下，后面补充@@）。
使用SELECT @@SESSION.sql_mode语句现场结果如下：
ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION；
的确包含ONLY_FULL_GROUP_BY，同样查找公司数据库，没有改属性。那么现在的问题就是删除这条属性，命令行执行语句：
set sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
之后执行SQL的确没问题，但是新建查询后查询又失败了，网上说这样的设置只能修改本次session的，新建窗口查询sql_mode的确没有删除ONLY属性。
尝试第二个方法，配置文件中修改，找到服务器上的配置文件（/etc/my.cnf），增加语句：
set sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
关闭mysql，开启mysql报错（距离工作人员办公还有不到二十分钟。。。），查看mysql日志（配置文件中有些地址），发现是配置文件错误，修改配置文件，将语句：
set sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
修改为（多个set）：
sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
启动mysql成功，执行有问题的sql成功（距离工作人员上班还有不到十分钟）；
现场mysql 5.7.22，公司5.7.12

mysql-01

mysql使用

用户、权限

创建用户
// host 用户地址，%表示可以远程，localhost表示本地，也可以指定具体IP
create user 'username'@'host' identified by 'password';

然后使用grant语句赋予该用户权限
grant all privileges on db.table to 'username'@'host';

还可以直接使用grant创建语句加赋予权限
// with grant option 是将‘赋予用户权限’的权限给该用户，一般不加，加了的话只可以将自己有权限的表grant。
// 只有root有创建用户的权限
grant all privileges on db.table to 'username'@'host' identified by 'password' [with grant option];

查看用户权限
show grants for 'username'@'host';

mysql-02
mysqldump 执行报错 unknown option '--no-beep'
在mysqldump后加 --no-defaults解决，问题原因还不知道

配置二进制日志，在my.ini中将log-bin注释放开即可，如果想要指定文件目录，可以在这个值后添加目录，
eg： log-bin = "D:/ai/mysql/MySQL/MySQL Server 5.7/log/binlog"
之后重启mysql服务。
使用的mysql版本为5.7.3，重启后报错：错误提示1067。
解决，在my.ini中添加server-id=123，如果只有一个mysql，数字随便填，为什么会这样，目前还不知道，后期补充（???????）。
保存后重启生效；

自动备份脚本

#! /bin/bash
DB_USER="hlwjzwfw_qhd"
DB_PWD="ZMDTHMoL4amCdK8B"
DB_NAME="hlwjzwfw_qhd_test"
BK_DIR="/home/mysql/backup"
BIN_DIR="/usr/local/mysql/bin"

$BIN_DIR/mysqldump --opt -u$DB_USER -p$DB_PWD $DB_NAME t_user > $BK_DIR/${DB_NAME}_$(date +%Y%m%d).sql

之后添加定时任务
crontab -e
执行后打开类似Vim的东西，添加需要执行的任务
45 11 * * * /home/mysql/shell/hlwj_qhd_test_bk.sh
分钟（0-59） 小时（0-23） 几号（1-31） 月份（1-12） 星期（0-7，0和7都是周日）；
*表示任何值；使用“,”隔开多个值；使用"-"表示区间 1-5 表示1,2,3,4,5；
所以上面写的任务表示：每天的11点45分执行后面的sh文件。

在设计数据库的时候对于唯一的字段需要增加控制，不能仅仅在业务程序里面控制，在数据库层面才是最保险的
ALTER TABLE table_name ADD UNIQUE(column_name)

数据库不能执行定时任务，需要在配置文件中添加
event_scheduler=ON

SQL调优
	使用explain + SQL；
	id 
		标识，表示语句执行的优先级，数字越大则越早执行，相同数字，则靠上的早执行；
	select_type
	    SIMPLE:简单SELECT(不使用UNION或子查询)
	    PRIMARY:最外面的SELECT
	    UNION:UNION中的第二个或后面的SELECT语句
	    DEPENDENT UNION:UNION中的第二个或后面的SELECT语句,取决于外面的查询
	    UNION RESULT:UNION 的结果
	    SUBQUERY:子查询中的第一个SELECT
	    DEPENDENT SUBQUERY:子查询中的第一个SELECT,取决于外面的查询
	    DERIVED:导出表的SELECT(FROM子句的子查询)
	table
		输出行所用的表，为了便于追踪，表的别名最好可以看出来是哪个表。
	type
		连接类型，按照最佳到最差排序如下，通常要求最少是range
		ystem:表仅有一行(=系统表)。这是const联接类型的一个特例。
		const:表最多有一个匹配行,它将在查询开始时被读取。因为仅有一行,在这行的列值可被优化器剩余部分认		为是常数。const表很快,因为它们只读取一次!
		eq_ref:对于每个来自于前面的表的行组合,从该表中读取一行。这可能是最好的联接类型,除了const类型。
		ref:对于每个来自于前面的表的行组合,所有有匹配索引值的行将从这张表中读取。
		ref_or_null:该联接类型如同ref,但是添加了MySQL可以专门搜索包含NULL值的行。
		index_merge:该联接类型表示使用了索引合并优化方法。
		unique_subquery:该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。
		index_subquery:该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的		非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr)
		range:只检索给定范围的行,使用一个索引来选择行。
		index:该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。
		ALL:对于每个来自于先前的表的行组合,进行完整的表扫描。
	possible_keys
		这个的意思是可能会使用那些索引，只是可能，不是真实使用。
	key
		这个才表示运行中真正使用的索引。
	key_len
		索引长度。
	ref
		表示索引所在的列。
	rows
		显示mysql认为要遍历的行数。
	filtered
		显示了通过条件过滤出的行数的百分比估计值。
	extra
		该列包含MySQL解决查询的详细信息
	    Distinct: MySQL发现第1个匹配行后,停止为当前的行组合搜索更多的行。
	    Not exists: MySQL能够对查询进行LEFT JOIN优化,发现1个匹配LEFT 									JOIN标准的行后,不再为前面的的行组合在该表内检查更多的行。
	    range checked for each record (index map: 														#):MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。
	    Using filesort: MySQL需要额外的一次传递,以找出如何按排序顺序检索行。
	    Using index: 从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。
	    Using temporary: 为了解决查询,MySQL需要创建一个临时表来容纳结果。
	    Using where: WHERE 子句用于限制哪一个行匹配下一个表或发送到客户。
	    Using sort_union(...), Using union(...), Using intersect(...): 									这些函数说明如何为index_merge联接类型合并索引扫描。
	    Using index for group-by: 类似于访问表的Using index方式,Using index for 						group-by表示MySQL发现了一个索引,可以用来查 询GROUP 											BY或DISTINCT查询的所有列,而不要额外搜索硬盘访问实际的表。

mysql编码

show variables like 'character%';

展示mysql的编码，已办如下：
// 设置客户端使用的字符集
character_set_client	utf8
// 设置连接数据库时的字符集
character_set_connection	utf8
// 设置默认创建数据库的编码格式
character_set_database	utf8
// 文件系统的编码格式，把操作系统上的文件名转化成此字符集，即把                                       // character_set_client转换character_set_filesystem， 默认binary是不做任何转换的
character_set_filesystem	binary
// 数据库给客户端返回时使用的编码格式
character_set_results	utf8
// 服务器安装时指定的默认编码格式
character_set_server	utf8
// 数据库系统使用的编码格式，这个值一直是utf8，不需要设置，它是为存储系统元数据的编码格式。
character_set_system	utf8
// 字符集安装的目录
character_sets_dir	/usr/local/mysql/share/charsets/

mysql默认的编码为latin1，对于我来说，character_set_server和character_set_database是比较关心的，后者在我们创建数据库的时候如果没有指定编码，则会使用这个值为默认编码。修改的话需要在配置文件中增加
character_set_server=utf8，然后重启后再次查看发现已经修改。


mysql连接数检测
show processlist;

mysql调优
1、比较运算符尽量用"="，不要用"<>"，"="有使用索引的几率
2、明知只有一条查询结果，就使用"limit 1"
3、字段选择合适的数据类型，能用smallint就不用int。
4、使用UNION ALL 代替 UNION，如果结果集允许重复的话
5、同样的查询结果，尽量保持查询语句一致，这样可以使用查询缓存
6、尽量避免使用select *
7、where、join、order by语句字段尽量被索引
8、将大的DELETE，UPDATE or INSERT 查询变成多个小查询